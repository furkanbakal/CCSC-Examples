CCS PCM C Compiler, Version 5.007, 61971               12-Aðu-20 18:23

               Filename:   D:\CCSC-ORNEKLERÝ\2_EKSEN_JOYSTIK\main.lst

               ROM used:   800 words (10%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           34 (9%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   232
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,10
000D:  DATA 28,10
000E:  DATA 20,3C
000F:  DATA 20,10
0010:  DATA 2C,10
0011:  DATA A0,3C
0012:  DATA 20,10
0013:  DATA 29,10
0014:  DATA 20,05
0015:  DATA 20,10
0016:  DATA 25,18
0017:  DATA 34,26
0018:  DATA 75,10
0019:  DATA 2C,10
001A:  DATA 25,18
001B:  DATA 34,26
001C:  DATA 75,00
*
0179:  MOVF   0B,W
017A:  MOVWF  2A
017B:  BCF    0B.7
017C:  BSF    03.5
017D:  BSF    03.6
017E:  BSF    0C.7
017F:  BSF    0C.0
0180:  NOP
0181:  NOP
0182:  BTFSC  03.0
0183:  GOTO   1AB
0184:  BCF    03.5
0185:  MOVF   0C,W
0186:  ANDLW  7F
0187:  BCF    03.6
0188:  MOVWF  2B
0189:  BSF    03.6
018A:  MOVF   0D,W
018B:  BCF    03.6
018C:  MOVWF  2C
018D:  BSF    03.6
018E:  MOVF   0F,W
018F:  BCF    03.6
0190:  MOVWF  2D
0191:  MOVF   2B,W
0192:  MOVWF  32
0193:  CALL   14D
0194:  MOVF   2C,W
0195:  BSF    03.6
0196:  MOVWF  0D
0197:  BCF    03.6
0198:  MOVF   2D,W
0199:  BSF    03.6
019A:  MOVWF  0F
019B:  BSF    03.5
019C:  BSF    0C.7
019D:  BSF    0C.0
019E:  NOP
019F:  NOP
01A0:  BCF    03.5
01A1:  BCF    03.6
01A2:  DECFSZ 29,F
01A3:  GOTO   1A5
01A4:  GOTO   1A8
01A5:  BSF    03.5
01A6:  BSF    03.6
01A7:  GOTO   1AB
01A8:  GOTO   1CA
01A9:  BSF    03.5
01AA:  BSF    03.6
01AB:  BCF    03.5
01AC:  RLF    0C,W
01AD:  RLF    0E,W
01AE:  ANDLW  7F
01AF:  BCF    03.6
01B0:  MOVWF  2B
01B1:  BSF    03.6
01B2:  MOVF   0D,W
01B3:  BCF    03.6
01B4:  MOVWF  2C
01B5:  BSF    03.6
01B6:  MOVF   0F,W
01B7:  BCF    03.6
01B8:  MOVWF  2D
01B9:  MOVF   2B,W
01BA:  MOVWF  32
01BB:  CALL   14D
01BC:  MOVF   2C,W
01BD:  BSF    03.6
01BE:  MOVWF  0D
01BF:  BCF    03.6
01C0:  MOVF   2D,W
01C1:  BSF    03.6
01C2:  MOVWF  0F
01C3:  INCF   0D,F
01C4:  BTFSC  03.2
01C5:  INCF   0F,F
01C6:  BCF    03.0
01C7:  BCF    03.6
01C8:  DECFSZ 29,F
01C9:  GOTO   17C
01CA:  BTFSC  2A.7
01CB:  BSF    0B.7
01CC:  BCF    0A.3
01CD:  BCF    0A.4
01CE:  GOTO   304 (RETURN)
01CF:  CLRF   31
01D0:  MOVF   04,W
01D1:  MOVWF  30
01D2:  BCF    31.0
01D3:  BTFSC  03.7
01D4:  BSF    31.0
01D5:  SWAPF  2A,W
01D6:  IORLW  F0
01D7:  MOVWF  2C
01D8:  ADDWF  2C,F
01D9:  ADDLW  E2
01DA:  MOVWF  2D
01DB:  ADDLW  32
01DC:  MOVWF  2F
01DD:  MOVF   2A,W
01DE:  ANDLW  0F
01DF:  ADDWF  2D,F
01E0:  ADDWF  2D,F
01E1:  ADDWF  2F,F
01E2:  ADDLW  E9
01E3:  MOVWF  2E
01E4:  ADDWF  2E,F
01E5:  ADDWF  2E,F
01E6:  SWAPF  29,W
01E7:  ANDLW  0F
01E8:  ADDWF  2E,F
01E9:  ADDWF  2F,F
01EA:  RLF    2E,F
01EB:  RLF    2F,F
01EC:  COMF   2F,F
01ED:  RLF    2F,F
01EE:  MOVF   29,W
01EF:  ANDLW  0F
01F0:  ADDWF  2F,F
01F1:  RLF    2C,F
01F2:  MOVLW  07
01F3:  MOVWF  2B
01F4:  MOVLW  0A
01F5:  ADDWF  2F,F
01F6:  DECF   2E,F
01F7:  BTFSS  03.0
01F8:  GOTO   1F5
01F9:  ADDWF  2E,F
01FA:  DECF   2D,F
01FB:  BTFSS  03.0
01FC:  GOTO   1F9
01FD:  ADDWF  2D,F
01FE:  DECF   2C,F
01FF:  BTFSS  03.0
0200:  GOTO   1FD
0201:  ADDWF  2C,F
0202:  DECF   2B,F
0203:  BTFSS  03.0
0204:  GOTO   201
0205:  MOVLW  2B
0206:  MOVWF  04
0207:  BCF    03.7
0208:  MOVLW  07
0209:  ANDWF  30,W
020A:  BCF    30.6
020B:  ADDWF  04,F
020C:  MOVLW  2F
020D:  SUBWF  04,W
020E:  BTFSC  03.2
020F:  BSF    30.6
0210:  MOVF   00,W
0211:  MOVWF  77
0212:  BTFSS  03.2
0213:  GOTO   21C
0214:  BTFSC  30.6
0215:  GOTO   21C
0216:  BTFSC  30.4
0217:  GOTO   22E
0218:  BTFSC  30.3
0219:  GOTO   21C
021A:  MOVLW  20
021B:  GOTO   21F
021C:  BSF    30.3
021D:  BCF    30.4
021E:  MOVLW  30
021F:  ADDWF  77,F
0220:  CLRF   2A
0221:  MOVF   04,W
0222:  MOVWF  29
0223:  BCF    2A.0
0224:  BTFSC  03.7
0225:  BSF    2A.0
0226:  MOVF   77,W
0227:  MOVWF  32
0228:  CALL   14D
0229:  MOVF   29,W
022A:  MOVWF  04
022B:  BCF    03.7
022C:  BTFSC  2A.0
022D:  BSF    03.7
022E:  INCF   04,F
022F:  BTFSS  30.6
0230:  GOTO   20C
0231:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
001D:  MOVLW  33
001E:  MOVWF  04
001F:  BCF    03.7
0020:  MOVF   00,W
0021:  BTFSC  03.2
0022:  GOTO   030
0023:  MOVLW  06
0024:  MOVWF  78
0025:  CLRF   77
0026:  DECFSZ 77,F
0027:  GOTO   026
0028:  DECFSZ 78,F
0029:  GOTO   025
002A:  MOVLW  7B
002B:  MOVWF  77
002C:  DECFSZ 77,F
002D:  GOTO   02C
002E:  DECFSZ 00,F
002F:  GOTO   023
0030:  RETURN
....................  
....................  
.................... #define LCD_ENABLE_PIN PIN_A4 
.................... #define LCD_RS_PIN PIN_A5 
.................... #define LCD_RW_PIN PIN_C6 
.................... #define LCD_DATA4 PIN_B4 
.................... #define LCD_DATA5 PIN_B5 
.................... #define LCD_DATA6 PIN_B6 
.................... #define LCD_DATA7 PIN_B7 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
009E:  BSF    06.4
....................    output_float(LCD_DATA5); 
009F:  BSF    06.5
....................    output_float(LCD_DATA6); 
00A0:  BSF    06.6
....................    output_float(LCD_DATA7); 
00A1:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00A2:  BCF    03.5
00A3:  BSF    07.6
00A4:  BCF    20.6
00A5:  MOVF   20,W
00A6:  BSF    03.5
00A7:  MOVWF  07
....................    delay_cycles(1); 
00A8:  NOP
....................    lcd_output_enable(1); 
00A9:  BCF    03.5
00AA:  BSF    05.4
00AB:  BSF    03.5
00AC:  BCF    05.4
....................    delay_cycles(1); 
00AD:  NOP
....................    high = lcd_read_nibble(); 
00AE:  BCF    03.5
00AF:  CALL   061
00B0:  MOVF   78,W
00B1:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
00B2:  BCF    05.4
00B3:  BSF    03.5
00B4:  BCF    05.4
....................    delay_cycles(1); 
00B5:  NOP
....................    lcd_output_enable(1); 
00B6:  BCF    03.5
00B7:  BSF    05.4
00B8:  BSF    03.5
00B9:  BCF    05.4
....................    delay_us(1); 
00BA:  GOTO   0BB
00BB:  GOTO   0BC
00BC:  NOP
....................    low = lcd_read_nibble(); 
00BD:  BCF    03.5
00BE:  CALL   061
00BF:  MOVF   78,W
00C0:  MOVWF  39
....................        
....................    lcd_output_enable(0); 
00C1:  BCF    05.4
00C2:  BSF    03.5
00C3:  BCF    05.4
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00C4:  BCF    06.4
....................    output_drive(LCD_DATA5); 
00C5:  BCF    06.5
....................    output_drive(LCD_DATA6); 
00C6:  BCF    06.6
....................    output_drive(LCD_DATA7); 
00C7:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00C8:  BCF    03.5
00C9:  SWAPF  3A,W
00CA:  MOVWF  77
00CB:  MOVLW  F0
00CC:  ANDWF  77,F
00CD:  MOVF   77,W
00CE:  IORWF  39,W
00CF:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0061:  CLRF   3B
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0062:  BSF    03.5
0063:  BSF    06.4
0064:  MOVLW  00
0065:  BCF    03.5
0066:  BTFSC  06.4
0067:  MOVLW  01
0068:  IORWF  3B,F
....................    n |= input(LCD_DATA5) << 1; 
0069:  BSF    03.5
006A:  BSF    06.5
006B:  MOVLW  00
006C:  BCF    03.5
006D:  BTFSC  06.5
006E:  MOVLW  01
006F:  MOVWF  77
0070:  BCF    03.0
0071:  RLF    77,F
0072:  MOVF   77,W
0073:  IORWF  3B,F
....................    n |= input(LCD_DATA6) << 2; 
0074:  BSF    03.5
0075:  BSF    06.6
0076:  MOVLW  00
0077:  BCF    03.5
0078:  BTFSC  06.6
0079:  MOVLW  01
007A:  MOVWF  77
007B:  RLF    77,F
007C:  RLF    77,F
007D:  MOVLW  FC
007E:  ANDWF  77,F
007F:  MOVF   77,W
0080:  IORWF  3B,F
....................    n |= input(LCD_DATA7) << 3; 
0081:  BSF    03.5
0082:  BSF    06.7
0083:  MOVLW  00
0084:  BCF    03.5
0085:  BTFSC  06.7
0086:  MOVLW  01
0087:  MOVWF  77
0088:  RLF    77,F
0089:  RLF    77,F
008A:  RLF    77,F
008B:  MOVLW  F8
008C:  ANDWF  77,F
008D:  MOVF   77,W
008E:  IORWF  3B,F
....................     
....................    return(n); 
008F:  MOVF   3B,W
0090:  MOVWF  78
....................   #else 
0091:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0031:  BTFSC  3A.0
0032:  GOTO   035
0033:  BCF    06.4
0034:  GOTO   036
0035:  BSF    06.4
0036:  BSF    03.5
0037:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0038:  BCF    03.5
0039:  BTFSC  3A.1
003A:  GOTO   03D
003B:  BCF    06.5
003C:  GOTO   03E
003D:  BSF    06.5
003E:  BSF    03.5
003F:  BCF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0040:  BCF    03.5
0041:  BTFSC  3A.2
0042:  GOTO   045
0043:  BCF    06.6
0044:  GOTO   046
0045:  BSF    06.6
0046:  BSF    03.5
0047:  BCF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0048:  BCF    03.5
0049:  BTFSC  3A.3
004A:  GOTO   04D
004B:  BCF    06.7
004C:  GOTO   04E
004D:  BSF    06.7
004E:  BSF    03.5
004F:  BCF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0050:  NOP
....................    lcd_output_enable(1); 
0051:  BCF    03.5
0052:  BSF    05.4
0053:  BSF    03.5
0054:  BCF    05.4
....................    delay_us(2); 
0055:  MOVLW  02
0056:  MOVWF  77
0057:  DECFSZ 77,F
0058:  GOTO   057
0059:  GOTO   05A
005A:  NOP
....................    lcd_output_enable(0); 
005B:  BCF    03.5
005C:  BCF    05.4
005D:  BSF    03.5
005E:  BCF    05.4
005F:  BCF    03.5
0060:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0092:  BSF    03.5
0093:  BCF    05.4
....................    lcd_rs_tris(); 
0094:  BCF    05.5
....................    lcd_rw_tris(); 
0095:  BCF    03.5
0096:  BCF    20.6
0097:  MOVF   20,W
0098:  BSF    03.5
0099:  MOVWF  07
....................   #endif 
....................  
....................    lcd_output_rs(0); 
009A:  BCF    03.5
009B:  BCF    05.5
009C:  BSF    03.5
009D:  BCF    05.5
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00D0:  MOVF   78,W
00D1:  MOVWF  39
00D2:  BTFSS  39.7
00D3:  GOTO   0D6
00D4:  BSF    03.5
00D5:  GOTO   09E
....................    lcd_output_rs(address); 
00D6:  MOVF   37,F
00D7:  BTFSS  03.2
00D8:  GOTO   0DB
00D9:  BCF    05.5
00DA:  GOTO   0DC
00DB:  BSF    05.5
00DC:  BSF    03.5
00DD:  BCF    05.5
....................    delay_cycles(1); 
00DE:  NOP
....................    lcd_output_rw(0); 
00DF:  BCF    03.5
00E0:  BCF    07.6
00E1:  BCF    20.6
00E2:  MOVF   20,W
00E3:  BSF    03.5
00E4:  MOVWF  07
....................    delay_cycles(1); 
00E5:  NOP
....................    lcd_output_enable(0); 
00E6:  BCF    03.5
00E7:  BCF    05.4
00E8:  BSF    03.5
00E9:  BCF    05.4
....................    lcd_send_nibble(n >> 4); 
00EA:  BCF    03.5
00EB:  SWAPF  38,W
00EC:  MOVWF  39
00ED:  MOVLW  0F
00EE:  ANDWF  39,F
00EF:  MOVF   39,W
00F0:  MOVWF  3A
00F1:  CALL   031
....................    lcd_send_nibble(n & 0xf); 
00F2:  MOVF   38,W
00F3:  ANDLW  0F
00F4:  MOVWF  39
00F5:  MOVWF  3A
00F6:  CALL   031
00F7:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F8:  BSF    03.5
00F9:  BCF    06.4
....................    output_drive(LCD_DATA5); 
00FA:  BCF    06.5
....................    output_drive(LCD_DATA6); 
00FB:  BCF    06.6
....................    output_drive(LCD_DATA7); 
00FC:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00FD:  BCF    05.4
....................    lcd_rs_tris(); 
00FE:  BCF    05.5
....................    lcd_rw_tris(); 
00FF:  BCF    03.5
0100:  BCF    20.6
0101:  MOVF   20,W
0102:  BSF    03.5
0103:  MOVWF  07
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0104:  BCF    03.5
0105:  BCF    05.5
0106:  BSF    03.5
0107:  BCF    05.5
....................    lcd_output_rw(0); 
0108:  BCF    03.5
0109:  BCF    07.6
010A:  BCF    20.6
010B:  MOVF   20,W
010C:  BSF    03.5
010D:  MOVWF  07
....................    lcd_output_enable(0); 
010E:  BCF    03.5
010F:  BCF    05.4
0110:  BSF    03.5
0111:  BCF    05.4
....................      
....................    delay_ms(15); 
0112:  MOVLW  0F
0113:  BCF    03.5
0114:  MOVWF  33
0115:  CALL   01D
....................    for(i=1;i<=3;++i) 
0116:  MOVLW  01
0117:  MOVWF  29
0118:  MOVF   29,W
0119:  SUBLW  03
011A:  BTFSS  03.0
011B:  GOTO   124
....................    { 
....................        lcd_send_nibble(3); 
011C:  MOVLW  03
011D:  MOVWF  3A
011E:  CALL   031
....................        delay_ms(5); 
011F:  MOVLW  05
0120:  MOVWF  33
0121:  CALL   01D
0122:  INCF   29,F
0123:  GOTO   118
....................    } 
....................     
....................    lcd_send_nibble(2); 
0124:  MOVLW  02
0125:  MOVWF  3A
0126:  CALL   031
....................    delay_ms(5); 
0127:  MOVLW  05
0128:  MOVWF  33
0129:  CALL   01D
....................    for(i=0;i<=3;++i) 
012A:  CLRF   29
012B:  MOVF   29,W
012C:  SUBLW  03
012D:  BTFSS  03.0
012E:  GOTO   138
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
012F:  MOVF   29,W
0130:  CALL   004
0131:  MOVWF  2A
0132:  CLRF   37
0133:  MOVF   2A,W
0134:  MOVWF  38
0135:  CALL   092
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0136:  INCF   29,F
0137:  GOTO   12B
0138:  BCF    0A.3
0139:  BCF    0A.4
013A:  GOTO   240 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
013B:  DECFSZ 34,W
013C:  GOTO   13E
013D:  GOTO   141
....................       address=LCD_LINE_TWO; 
013E:  MOVLW  40
013F:  MOVWF  35
0140:  GOTO   142
....................    else 
....................       address=0; 
0141:  CLRF   35
....................       
....................    address+=x-1; 
0142:  MOVLW  01
0143:  SUBWF  33,W
0144:  ADDWF  35,F
....................    lcd_send_byte(0,0x80|address); 
0145:  MOVF   35,W
0146:  IORLW  80
0147:  MOVWF  36
0148:  CLRF   37
0149:  MOVF   36,W
014A:  MOVWF  38
014B:  CALL   092
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
014C:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
014D:  MOVF   32,W
014E:  XORLW  07
014F:  BTFSC  03.2
0150:  GOTO   15B
0151:  XORLW  0B
0152:  BTFSC  03.2
0153:  GOTO   160
0154:  XORLW  06
0155:  BTFSC  03.2
0156:  GOTO   168
0157:  XORLW  02
0158:  BTFSC  03.2
0159:  GOTO   16E
015A:  GOTO   173
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
015B:  MOVLW  01
015C:  MOVWF  33
015D:  MOVWF  34
015E:  CALL   13B
015F:  GOTO   178
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0160:  CLRF   37
0161:  MOVLW  01
0162:  MOVWF  38
0163:  CALL   092
....................                      delay_ms(2); 
0164:  MOVLW  02
0165:  MOVWF  33
0166:  CALL   01D
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0167:  GOTO   178
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0168:  MOVLW  01
0169:  MOVWF  33
016A:  MOVLW  02
016B:  MOVWF  34
016C:  CALL   13B
016D:  GOTO   178
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
016E:  CLRF   37
016F:  MOVLW  10
0170:  MOVWF  38
0171:  CALL   092
0172:  GOTO   178
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0173:  MOVLW  01
0174:  MOVWF  37
0175:  MOVF   32,W
0176:  MOVWF  38
0177:  CALL   092
....................      #endif 
....................    } 
0178:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
*
0232:  MOVLW  FF
0233:  MOVWF  20
0234:  BSF    03.5
0235:  BSF    1F.0
0236:  BSF    1F.1
0237:  BSF    1F.2
0238:  BCF    1F.3
0239:  MOVLW  07
023A:  MOVWF  1C
023B:  BCF    03.7
023C:  MOVLW  1F
023D:  ANDWF  03,F
.................... {  
....................    int16 xdata, ydata, xxdata, yydata; 
....................    lcd_init(); 
023E:  BCF    03.5
023F:  GOTO   0F8
....................    setup_adc(ADC_CLOCK_DIV_2);  //fOSC/2 ayarlandý 
0240:  BSF    03.5
0241:  BCF    1F.6
0242:  BCF    03.5
0243:  BCF    1F.6
0244:  BCF    1F.7
0245:  BSF    03.5
0246:  BSF    1F.7
0247:  BCF    03.5
0248:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG); //tüm B kanal analog giriþ modunda---NO_ANALOGS yazýlsaydý tamamý dijital olurdu 
0249:  BSF    03.5
024A:  BCF    1F.0
024B:  BCF    1F.1
024C:  BCF    1F.2
024D:  BCF    1F.3
....................    set_adc_channel(5);  // AN5-RE0-JOYSTIK Y EKSENÝ AKTIF 
024E:  MOVLW  28
024F:  MOVWF  78
0250:  BCF    03.5
0251:  MOVF   1F,W
0252:  ANDLW  C7
0253:  IORWF  78,W
0254:  MOVWF  1F
....................    while(TRUE) 
....................    {  setup_adc_ports(ALL_ANALOG); 
0255:  BSF    03.5
0256:  BCF    1F.0
0257:  BCF    1F.1
0258:  BCF    1F.2
0259:  BCF    1F.3
....................       set_adc_channel(5);  // AN5-RE0-JOYSTIK Y EKSENÝ AKTIF 
025A:  MOVLW  28
025B:  MOVWF  78
025C:  BCF    03.5
025D:  MOVF   1F,W
025E:  ANDLW  C7
025F:  IORWF  78,W
0260:  MOVWF  1F
....................       ydata=read_adc(); 
0261:  BSF    1F.2
0262:  BTFSC  1F.2
0263:  GOTO   262
0264:  BSF    03.5
0265:  MOVF   1E,W
0266:  BCF    03.5
0267:  MOVWF  23
0268:  MOVF   1E,W
0269:  MOVWF  24
....................       delay_ms(1); 
026A:  MOVLW  01
026B:  MOVWF  33
026C:  CALL   01D
....................       set_adc_channel(6);  // AN6-RE1-JOYSTIK x EKSENÝ AKTIF 
026D:  MOVLW  30
026E:  MOVWF  78
026F:  MOVF   1F,W
0270:  ANDLW  C7
0271:  IORWF  78,W
0272:  MOVWF  1F
....................       xdata=read_adc(); 
0273:  BSF    1F.2
0274:  BTFSC  1F.2
0275:  GOTO   274
0276:  BSF    03.5
0277:  MOVF   1E,W
0278:  BCF    03.5
0279:  MOVWF  21
027A:  MOVF   1E,W
027B:  MOVWF  22
....................       delay_ms(1); 
027C:  MOVLW  01
027D:  MOVWF  33
027E:  CALL   01D
....................       if(xdata==512) xxdata=0; 
027F:  MOVF   21,F
0280:  BTFSS  03.2
0281:  GOTO   288
0282:  MOVF   22,W
0283:  SUBLW  02
0284:  BTFSS  03.2
0285:  GOTO   288
0286:  CLRF   26
0287:  CLRF   25
....................       if(ydata==512) yydata=0; 
0288:  MOVF   23,F
0289:  BTFSS  03.2
028A:  GOTO   291
028B:  MOVF   24,W
028C:  SUBLW  02
028D:  BTFSS  03.2
028E:  GOTO   291
028F:  CLRF   28
0290:  CLRF   27
....................       if(xdata>512) xxdata=(xdata-512)*2+1; 
0291:  MOVF   22,W
0292:  SUBLW  01
0293:  BTFSC  03.0
0294:  GOTO   2AF
0295:  XORLW  FF
0296:  BTFSS  03.2
0297:  GOTO   29C
0298:  MOVF   21,W
0299:  SUBLW  00
029A:  BTFSC  03.0
029B:  GOTO   2AF
029C:  MOVLW  00
029D:  SUBWF  21,W
029E:  MOVWF  29
029F:  MOVF   22,W
02A0:  MOVWF  2A
02A1:  MOVLW  02
02A2:  BTFSS  03.0
02A3:  MOVLW  03
02A4:  SUBWF  2A,F
02A5:  BCF    03.0
02A6:  RLF    29,F
02A7:  RLF    2A,F
02A8:  MOVLW  01
02A9:  ADDWF  29,W
02AA:  MOVWF  25
02AB:  MOVF   2A,W
02AC:  MOVWF  26
02AD:  BTFSC  03.0
02AE:  INCF   26,F
....................       if(ydata<512) yydata=(512-xdata)*2+1; 
02AF:  MOVF   24,W
02B0:  SUBLW  01
02B1:  BTFSS  03.0
02B2:  GOTO   2C6
02B3:  MOVF   21,W
02B4:  SUBLW  00
02B5:  MOVWF  29
02B6:  MOVLW  02
02B7:  MOVWF  2A
02B8:  MOVF   22,W
02B9:  BTFSS  03.0
02BA:  INCFSZ 22,W
02BB:  SUBWF  2A,F
02BC:  BCF    03.0
02BD:  RLF    29,F
02BE:  RLF    2A,F
02BF:  MOVLW  01
02C0:  ADDWF  29,W
02C1:  MOVWF  27
02C2:  MOVF   2A,W
02C3:  MOVWF  28
02C4:  BTFSC  03.0
02C5:  INCF   28,F
....................       if(xdata<512) xxdata=(511-xdata)*2+1; 
02C6:  MOVF   22,W
02C7:  SUBLW  01
02C8:  BTFSS  03.0
02C9:  GOTO   2DD
02CA:  MOVF   21,W
02CB:  SUBLW  FF
02CC:  MOVWF  29
02CD:  MOVLW  01
02CE:  MOVWF  2A
02CF:  MOVF   22,W
02D0:  BTFSS  03.0
02D1:  INCFSZ 22,W
02D2:  SUBWF  2A,F
02D3:  BCF    03.0
02D4:  RLF    29,F
02D5:  RLF    2A,F
02D6:  MOVLW  01
02D7:  ADDWF  29,W
02D8:  MOVWF  25
02D9:  MOVF   2A,W
02DA:  MOVWF  26
02DB:  BTFSC  03.0
02DC:  INCF   26,F
....................       if(ydata<512) yydata=(511-ydata)*2+1; 
02DD:  MOVF   24,W
02DE:  SUBLW  01
02DF:  BTFSS  03.0
02E0:  GOTO   2F4
02E1:  MOVF   23,W
02E2:  SUBLW  FF
02E3:  MOVWF  29
02E4:  MOVLW  01
02E5:  MOVWF  2A
02E6:  MOVF   24,W
02E7:  BTFSS  03.0
02E8:  INCFSZ 24,W
02E9:  SUBWF  2A,F
02EA:  BCF    03.0
02EB:  RLF    29,F
02EC:  RLF    2A,F
02ED:  MOVLW  01
02EE:  ADDWF  29,W
02EF:  MOVWF  27
02F0:  MOVF   2A,W
02F1:  MOVWF  28
02F2:  BTFSC  03.0
02F3:  INCF   28,F
....................        
....................       setup_adc_ports(NO_ANALOGS); 
02F4:  BSF    03.5
02F5:  BSF    1F.0
02F6:  BSF    1F.1
02F7:  BSF    1F.2
02F8:  BCF    1F.3
....................       printf(lcd_putc,"\f (  x  ,  y  )  \n  %04Lu , %04Lu",xxdata,yydata); 
02F9:  MOVLW  0C
02FA:  BCF    03.5
02FB:  BSF    03.6
02FC:  MOVWF  0D
02FD:  MOVLW  00
02FE:  MOVWF  0F
02FF:  BCF    03.0
0300:  MOVLW  14
0301:  BCF    03.6
0302:  MOVWF  29
0303:  GOTO   179
0304:  MOVLW  09
0305:  MOVWF  04
0306:  MOVF   26,W
0307:  MOVWF  2A
0308:  MOVF   25,W
0309:  MOVWF  29
030A:  CALL   1CF
030B:  MOVLW  20
030C:  MOVWF  32
030D:  CALL   14D
030E:  MOVLW  2C
030F:  MOVWF  32
0310:  CALL   14D
0311:  MOVLW  20
0312:  MOVWF  32
0313:  CALL   14D
0314:  MOVLW  09
0315:  MOVWF  04
0316:  MOVF   28,W
0317:  MOVWF  2A
0318:  MOVF   27,W
0319:  MOVWF  29
031A:  CALL   1CF
....................       delay_ms(30); 
031B:  MOVLW  1E
031C:  MOVWF  33
031D:  CALL   01D
031E:  GOTO   255
....................    } 
....................  
.................... } 
031F:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
