CCS PCM C Compiler, Version 5.007, 61971               12-Aðu-20 12:24

               Filename:   D:\CCSC-ORNEKLERÝ\PWM_MOTOR\pwmmotor.lst

               ROM used:   854 words (10%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           30 (8%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   237
0003:  NOP
.................... #include <pwmmotor.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,10
000D:  DATA 4F,29
000E:  DATA D4,20
000F:  DATA 20,05
0010:  DATA A0,12
0011:  DATA 30,1A
0012:  DATA CC,3A
0013:  DATA 00,00
0014:  DATA 0C,10
0015:  DATA 49,26
0016:  DATA 45,29
0017:  DATA 49,10
0018:  DATA 0A,10
0019:  DATA 25,18
001A:  DATA 34,26
001B:  DATA 75,00
001C:  DATA 0C,10
001D:  DATA C7,22
001E:  DATA D2,24
001F:  DATA 20,05
0020:  DATA A0,12
0021:  DATA 30,1A
0022:  DATA CC,3A
0023:  DATA 00,00
*
0180:  MOVF   0B,W
0181:  MOVWF  26
0182:  BCF    0B.7
0183:  BSF    03.5
0184:  BSF    03.6
0185:  BSF    0C.7
0186:  BSF    0C.0
0187:  NOP
0188:  NOP
0189:  BTFSC  03.0
018A:  GOTO   1B2
018B:  BCF    03.5
018C:  MOVF   0C,W
018D:  ANDLW  7F
018E:  BCF    03.6
018F:  MOVWF  27
0190:  BSF    03.6
0191:  MOVF   0D,W
0192:  BCF    03.6
0193:  MOVWF  28
0194:  BSF    03.6
0195:  MOVF   0F,W
0196:  BCF    03.6
0197:  MOVWF  29
0198:  MOVF   27,W
0199:  MOVWF  2E
019A:  CALL   154
019B:  MOVF   28,W
019C:  BSF    03.6
019D:  MOVWF  0D
019E:  BCF    03.6
019F:  MOVF   29,W
01A0:  BSF    03.6
01A1:  MOVWF  0F
01A2:  BSF    03.5
01A3:  BSF    0C.7
01A4:  BSF    0C.0
01A5:  NOP
01A6:  NOP
01A7:  BCF    03.5
01A8:  BCF    03.6
01A9:  DECFSZ 25,F
01AA:  GOTO   1AC
01AB:  GOTO   1AF
01AC:  BSF    03.5
01AD:  BSF    03.6
01AE:  GOTO   1B2
01AF:  GOTO   1D1
01B0:  BSF    03.5
01B1:  BSF    03.6
01B2:  BCF    03.5
01B3:  RLF    0C,W
01B4:  RLF    0E,W
01B5:  ANDLW  7F
01B6:  BCF    03.6
01B7:  MOVWF  27
01B8:  BSF    03.6
01B9:  MOVF   0D,W
01BA:  BCF    03.6
01BB:  MOVWF  28
01BC:  BSF    03.6
01BD:  MOVF   0F,W
01BE:  BCF    03.6
01BF:  MOVWF  29
01C0:  MOVF   27,W
01C1:  MOVWF  2E
01C2:  CALL   154
01C3:  MOVF   28,W
01C4:  BSF    03.6
01C5:  MOVWF  0D
01C6:  BCF    03.6
01C7:  MOVF   29,W
01C8:  BSF    03.6
01C9:  MOVWF  0F
01CA:  INCF   0D,F
01CB:  BTFSC  03.2
01CC:  INCF   0F,F
01CD:  BCF    03.0
01CE:  BCF    03.6
01CF:  DECFSZ 25,F
01D0:  GOTO   183
01D1:  BTFSC  26.7
01D2:  BSF    0B.7
01D3:  RETURN
01D4:  CLRF   2D
01D5:  MOVF   04,W
01D6:  MOVWF  2C
01D7:  BCF    2D.0
01D8:  BTFSC  03.7
01D9:  BSF    2D.0
01DA:  SWAPF  26,W
01DB:  IORLW  F0
01DC:  MOVWF  28
01DD:  ADDWF  28,F
01DE:  ADDLW  E2
01DF:  MOVWF  29
01E0:  ADDLW  32
01E1:  MOVWF  2B
01E2:  MOVF   26,W
01E3:  ANDLW  0F
01E4:  ADDWF  29,F
01E5:  ADDWF  29,F
01E6:  ADDWF  2B,F
01E7:  ADDLW  E9
01E8:  MOVWF  2A
01E9:  ADDWF  2A,F
01EA:  ADDWF  2A,F
01EB:  SWAPF  25,W
01EC:  ANDLW  0F
01ED:  ADDWF  2A,F
01EE:  ADDWF  2B,F
01EF:  RLF    2A,F
01F0:  RLF    2B,F
01F1:  COMF   2B,F
01F2:  RLF    2B,F
01F3:  MOVF   25,W
01F4:  ANDLW  0F
01F5:  ADDWF  2B,F
01F6:  RLF    28,F
01F7:  MOVLW  07
01F8:  MOVWF  27
01F9:  MOVLW  0A
01FA:  ADDWF  2B,F
01FB:  DECF   2A,F
01FC:  BTFSS  03.0
01FD:  GOTO   1FA
01FE:  ADDWF  2A,F
01FF:  DECF   29,F
0200:  BTFSS  03.0
0201:  GOTO   1FE
0202:  ADDWF  29,F
0203:  DECF   28,F
0204:  BTFSS  03.0
0205:  GOTO   202
0206:  ADDWF  28,F
0207:  DECF   27,F
0208:  BTFSS  03.0
0209:  GOTO   206
020A:  MOVLW  27
020B:  MOVWF  04
020C:  BCF    03.7
020D:  MOVLW  07
020E:  ANDWF  2C,W
020F:  BCF    2C.6
0210:  ADDWF  04,F
0211:  MOVLW  2B
0212:  SUBWF  04,W
0213:  BTFSC  03.2
0214:  BSF    2C.6
0215:  MOVF   00,W
0216:  MOVWF  77
0217:  BTFSS  03.2
0218:  GOTO   221
0219:  BTFSC  2C.6
021A:  GOTO   221
021B:  BTFSC  2C.4
021C:  GOTO   233
021D:  BTFSC  2C.3
021E:  GOTO   221
021F:  MOVLW  20
0220:  GOTO   224
0221:  BSF    2C.3
0222:  BCF    2C.4
0223:  MOVLW  30
0224:  ADDWF  77,F
0225:  CLRF   26
0226:  MOVF   04,W
0227:  MOVWF  25
0228:  BCF    26.0
0229:  BTFSC  03.7
022A:  BSF    26.0
022B:  MOVF   77,W
022C:  MOVWF  2E
022D:  CALL   154
022E:  MOVF   25,W
022F:  MOVWF  04
0230:  BCF    03.7
0231:  BTFSC  26.0
0232:  BSF    03.7
0233:  INCF   04,F
0234:  BTFSS  2C.6
0235:  GOTO   211
0236:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0024:  MOVLW  2F
0025:  MOVWF  04
0026:  BCF    03.7
0027:  MOVF   00,W
0028:  BTFSC  03.2
0029:  GOTO   037
002A:  MOVLW  06
002B:  MOVWF  78
002C:  CLRF   77
002D:  DECFSZ 77,F
002E:  GOTO   02D
002F:  DECFSZ 78,F
0030:  GOTO   02C
0031:  MOVLW  7B
0032:  MOVWF  77
0033:  DECFSZ 77,F
0034:  GOTO   033
0035:  DECFSZ 00,F
0036:  GOTO   02A
0037:  RETURN
....................  
....................  
.................... #define LCD_ENABLE_PIN PIN_A4 
.................... #define LCD_RS_PIN PIN_A5 
.................... #define LCD_RW_PIN PIN_C6 
.................... #define LCD_DATA4 PIN_B4 
.................... #define LCD_DATA5 PIN_B5 
.................... #define LCD_DATA6 PIN_B6 
.................... #define LCD_DATA7 PIN_B7 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00A5:  BSF    06.4
....................    output_float(LCD_DATA5); 
00A6:  BSF    06.5
....................    output_float(LCD_DATA6); 
00A7:  BSF    06.6
....................    output_float(LCD_DATA7); 
00A8:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00A9:  BCF    03.5
00AA:  BSF    07.6
00AB:  BCF    20.6
00AC:  MOVF   20,W
00AD:  BSF    03.5
00AE:  MOVWF  07
....................    delay_cycles(1); 
00AF:  NOP
....................    lcd_output_enable(1); 
00B0:  BCF    03.5
00B1:  BSF    05.4
00B2:  BSF    03.5
00B3:  BCF    05.4
....................    delay_cycles(1); 
00B4:  NOP
....................    high = lcd_read_nibble(); 
00B5:  BCF    03.5
00B6:  CALL   068
00B7:  MOVF   78,W
00B8:  MOVWF  36
....................        
....................    lcd_output_enable(0); 
00B9:  BCF    05.4
00BA:  BSF    03.5
00BB:  BCF    05.4
....................    delay_cycles(1); 
00BC:  NOP
....................    lcd_output_enable(1); 
00BD:  BCF    03.5
00BE:  BSF    05.4
00BF:  BSF    03.5
00C0:  BCF    05.4
....................    delay_us(1); 
00C1:  GOTO   0C2
00C2:  GOTO   0C3
00C3:  NOP
....................    low = lcd_read_nibble(); 
00C4:  BCF    03.5
00C5:  CALL   068
00C6:  MOVF   78,W
00C7:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
00C8:  BCF    05.4
00C9:  BSF    03.5
00CA:  BCF    05.4
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00CB:  BCF    06.4
....................    output_drive(LCD_DATA5); 
00CC:  BCF    06.5
....................    output_drive(LCD_DATA6); 
00CD:  BCF    06.6
....................    output_drive(LCD_DATA7); 
00CE:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00CF:  BCF    03.5
00D0:  SWAPF  36,W
00D1:  MOVWF  77
00D2:  MOVLW  F0
00D3:  ANDWF  77,F
00D4:  MOVF   77,W
00D5:  IORWF  35,W
00D6:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0068:  CLRF   37
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0069:  BSF    03.5
006A:  BSF    06.4
006B:  MOVLW  00
006C:  BCF    03.5
006D:  BTFSC  06.4
006E:  MOVLW  01
006F:  IORWF  37,F
....................    n |= input(LCD_DATA5) << 1; 
0070:  BSF    03.5
0071:  BSF    06.5
0072:  MOVLW  00
0073:  BCF    03.5
0074:  BTFSC  06.5
0075:  MOVLW  01
0076:  MOVWF  77
0077:  BCF    03.0
0078:  RLF    77,F
0079:  MOVF   77,W
007A:  IORWF  37,F
....................    n |= input(LCD_DATA6) << 2; 
007B:  BSF    03.5
007C:  BSF    06.6
007D:  MOVLW  00
007E:  BCF    03.5
007F:  BTFSC  06.6
0080:  MOVLW  01
0081:  MOVWF  77
0082:  RLF    77,F
0083:  RLF    77,F
0084:  MOVLW  FC
0085:  ANDWF  77,F
0086:  MOVF   77,W
0087:  IORWF  37,F
....................    n |= input(LCD_DATA7) << 3; 
0088:  BSF    03.5
0089:  BSF    06.7
008A:  MOVLW  00
008B:  BCF    03.5
008C:  BTFSC  06.7
008D:  MOVLW  01
008E:  MOVWF  77
008F:  RLF    77,F
0090:  RLF    77,F
0091:  RLF    77,F
0092:  MOVLW  F8
0093:  ANDWF  77,F
0094:  MOVF   77,W
0095:  IORWF  37,F
....................     
....................    return(n); 
0096:  MOVF   37,W
0097:  MOVWF  78
....................   #else 
0098:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0038:  BTFSC  36.0
0039:  GOTO   03C
003A:  BCF    06.4
003B:  GOTO   03D
003C:  BSF    06.4
003D:  BSF    03.5
003E:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
003F:  BCF    03.5
0040:  BTFSC  36.1
0041:  GOTO   044
0042:  BCF    06.5
0043:  GOTO   045
0044:  BSF    06.5
0045:  BSF    03.5
0046:  BCF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0047:  BCF    03.5
0048:  BTFSC  36.2
0049:  GOTO   04C
004A:  BCF    06.6
004B:  GOTO   04D
004C:  BSF    06.6
004D:  BSF    03.5
004E:  BCF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
004F:  BCF    03.5
0050:  BTFSC  36.3
0051:  GOTO   054
0052:  BCF    06.7
0053:  GOTO   055
0054:  BSF    06.7
0055:  BSF    03.5
0056:  BCF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0057:  NOP
....................    lcd_output_enable(1); 
0058:  BCF    03.5
0059:  BSF    05.4
005A:  BSF    03.5
005B:  BCF    05.4
....................    delay_us(2); 
005C:  MOVLW  02
005D:  MOVWF  77
005E:  DECFSZ 77,F
005F:  GOTO   05E
0060:  GOTO   061
0061:  NOP
....................    lcd_output_enable(0); 
0062:  BCF    03.5
0063:  BCF    05.4
0064:  BSF    03.5
0065:  BCF    05.4
0066:  BCF    03.5
0067:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0099:  BSF    03.5
009A:  BCF    05.4
....................    lcd_rs_tris(); 
009B:  BCF    05.5
....................    lcd_rw_tris(); 
009C:  BCF    03.5
009D:  BCF    20.6
009E:  MOVF   20,W
009F:  BSF    03.5
00A0:  MOVWF  07
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00A1:  BCF    03.5
00A2:  BCF    05.5
00A3:  BSF    03.5
00A4:  BCF    05.5
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00D7:  MOVF   78,W
00D8:  MOVWF  35
00D9:  BTFSS  35.7
00DA:  GOTO   0DD
00DB:  BSF    03.5
00DC:  GOTO   0A5
....................    lcd_output_rs(address); 
00DD:  MOVF   33,F
00DE:  BTFSS  03.2
00DF:  GOTO   0E2
00E0:  BCF    05.5
00E1:  GOTO   0E3
00E2:  BSF    05.5
00E3:  BSF    03.5
00E4:  BCF    05.5
....................    delay_cycles(1); 
00E5:  NOP
....................    lcd_output_rw(0); 
00E6:  BCF    03.5
00E7:  BCF    07.6
00E8:  BCF    20.6
00E9:  MOVF   20,W
00EA:  BSF    03.5
00EB:  MOVWF  07
....................    delay_cycles(1); 
00EC:  NOP
....................    lcd_output_enable(0); 
00ED:  BCF    03.5
00EE:  BCF    05.4
00EF:  BSF    03.5
00F0:  BCF    05.4
....................    lcd_send_nibble(n >> 4); 
00F1:  BCF    03.5
00F2:  SWAPF  34,W
00F3:  MOVWF  35
00F4:  MOVLW  0F
00F5:  ANDWF  35,F
00F6:  MOVF   35,W
00F7:  MOVWF  36
00F8:  CALL   038
....................    lcd_send_nibble(n & 0xf); 
00F9:  MOVF   34,W
00FA:  ANDLW  0F
00FB:  MOVWF  35
00FC:  MOVWF  36
00FD:  CALL   038
00FE:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00FF:  BSF    03.5
0100:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0101:  BCF    06.5
....................    output_drive(LCD_DATA6); 
0102:  BCF    06.6
....................    output_drive(LCD_DATA7); 
0103:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0104:  BCF    05.4
....................    lcd_rs_tris(); 
0105:  BCF    05.5
....................    lcd_rw_tris(); 
0106:  BCF    03.5
0107:  BCF    20.6
0108:  MOVF   20,W
0109:  BSF    03.5
010A:  MOVWF  07
....................  #endif 
....................  
....................    lcd_output_rs(0); 
010B:  BCF    03.5
010C:  BCF    05.5
010D:  BSF    03.5
010E:  BCF    05.5
....................    lcd_output_rw(0); 
010F:  BCF    03.5
0110:  BCF    07.6
0111:  BCF    20.6
0112:  MOVF   20,W
0113:  BSF    03.5
0114:  MOVWF  07
....................    lcd_output_enable(0); 
0115:  BCF    03.5
0116:  BCF    05.4
0117:  BSF    03.5
0118:  BCF    05.4
....................      
....................    delay_ms(15); 
0119:  MOVLW  0F
011A:  BCF    03.5
011B:  MOVWF  2F
011C:  CALL   024
....................    for(i=1;i<=3;++i) 
011D:  MOVLW  01
011E:  MOVWF  25
011F:  MOVF   25,W
0120:  SUBLW  03
0121:  BTFSS  03.0
0122:  GOTO   12B
....................    { 
....................        lcd_send_nibble(3); 
0123:  MOVLW  03
0124:  MOVWF  36
0125:  CALL   038
....................        delay_ms(5); 
0126:  MOVLW  05
0127:  MOVWF  2F
0128:  CALL   024
0129:  INCF   25,F
012A:  GOTO   11F
....................    } 
....................     
....................    lcd_send_nibble(2); 
012B:  MOVLW  02
012C:  MOVWF  36
012D:  CALL   038
....................    delay_ms(5); 
012E:  MOVLW  05
012F:  MOVWF  2F
0130:  CALL   024
....................    for(i=0;i<=3;++i) 
0131:  CLRF   25
0132:  MOVF   25,W
0133:  SUBLW  03
0134:  BTFSS  03.0
0135:  GOTO   13F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0136:  MOVF   25,W
0137:  CALL   004
0138:  MOVWF  26
0139:  CLRF   33
013A:  MOVF   26,W
013B:  MOVWF  34
013C:  CALL   099
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
013D:  INCF   25,F
013E:  GOTO   132
013F:  BCF    0A.3
0140:  BCF    0A.4
0141:  GOTO   245 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0142:  DECFSZ 30,W
0143:  GOTO   145
0144:  GOTO   148
....................       address=LCD_LINE_TWO; 
0145:  MOVLW  40
0146:  MOVWF  31
0147:  GOTO   149
....................    else 
....................       address=0; 
0148:  CLRF   31
....................       
....................    address+=x-1; 
0149:  MOVLW  01
014A:  SUBWF  2F,W
014B:  ADDWF  31,F
....................    lcd_send_byte(0,0x80|address); 
014C:  MOVF   31,W
014D:  IORLW  80
014E:  MOVWF  32
014F:  CLRF   33
0150:  MOVF   32,W
0151:  MOVWF  34
0152:  CALL   099
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0153:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0154:  MOVF   2E,W
0155:  XORLW  07
0156:  BTFSC  03.2
0157:  GOTO   162
0158:  XORLW  0B
0159:  BTFSC  03.2
015A:  GOTO   167
015B:  XORLW  06
015C:  BTFSC  03.2
015D:  GOTO   16F
015E:  XORLW  02
015F:  BTFSC  03.2
0160:  GOTO   175
0161:  GOTO   17A
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0162:  MOVLW  01
0163:  MOVWF  2F
0164:  MOVWF  30
0165:  CALL   142
0166:  GOTO   17F
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0167:  CLRF   33
0168:  MOVLW  01
0169:  MOVWF  34
016A:  CALL   099
....................                      delay_ms(2); 
016B:  MOVLW  02
016C:  MOVWF  2F
016D:  CALL   024
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
016E:  GOTO   17F
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
016F:  MOVLW  01
0170:  MOVWF  2F
0171:  MOVLW  02
0172:  MOVWF  30
0173:  CALL   142
0174:  GOTO   17F
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0175:  CLRF   33
0176:  MOVLW  10
0177:  MOVWF  34
0178:  CALL   099
0179:  GOTO   17F
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
017A:  MOVLW  01
017B:  MOVWF  33
017C:  MOVF   2E,W
017D:  MOVWF  34
017E:  CALL   099
....................      #endif 
....................    } 
017F:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
*
0237:  MOVLW  FF
0238:  MOVWF  20
0239:  BSF    03.5
023A:  BSF    1F.0
023B:  BSF    1F.1
023C:  BSF    1F.2
023D:  BCF    1F.3
023E:  MOVLW  07
023F:  MOVWF  1C
0240:  BCF    03.7
0241:  MOVLW  1F
0242:  ANDWF  03,F
.................... {  int16 data, ydata; 
....................    lcd_init(); 
0243:  BCF    03.5
0244:  GOTO   0FF
....................    setup_adc(ADC_CLOCK_DIV_2);  // fOSC/2 ayarlandý 
0245:  BSF    03.5
0246:  BCF    1F.6
0247:  BCF    03.5
0248:  BCF    1F.6
0249:  BCF    1F.7
024A:  BSF    03.5
024B:  BSF    1F.7
024C:  BCF    03.5
024D:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG);  // tüm 8 kanal analog giriþ modunda 
024E:  BSF    03.5
024F:  BCF    1F.0
0250:  BCF    1F.1
0251:  BCF    1F.2
0252:  BCF    1F.3
....................    set_adc_channel(5);  //ANS- RE0 - joystik y ekseni aktif 
0253:  MOVLW  28
0254:  MOVWF  78
0255:  BCF    03.5
0256:  MOVF   1F,W
0257:  ANDLW  C7
0258:  IORWF  78,W
0259:  MOVWF  1F
....................    output_c(0); 
025A:  MOVLW  00
025B:  MOVWF  20
025C:  BSF    03.5
025D:  CLRF   07
025E:  BCF    03.5
025F:  CLRF   07
....................  
....................    while(TRUE) 
....................    { 
....................     setup_ccp1(CCP_PWM);  //PWM modu aktif hale geldi 
0260:  BCF    20.2
0261:  MOVF   20,W
0262:  BSF    03.5
0263:  MOVWF  07
0264:  BCF    03.5
0265:  BCF    07.2
0266:  MOVLW  0C
0267:  MOVWF  17
....................     setup_timer_2(T2_DIV_BY_4,255,1);  //TMR2Prescale Value=4 oldu PR2=255 oldu 
0268:  MOVLW  00
0269:  MOVWF  78
026A:  IORLW  05
026B:  MOVWF  12
026C:  MOVLW  FF
026D:  BSF    03.5
026E:  MOVWF  12
....................     set_pwm1_duty(0); 
026F:  BCF    03.5
0270:  CLRF   15
....................     setup_adc_ports(ALL_ANALOG); 
0271:  BSF    03.5
0272:  BCF    1F.0
0273:  BCF    1F.1
0274:  BCF    1F.2
0275:  BCF    1F.3
....................     set_adc_channel(5);  // AN5 RE0 joystic y ekseni aktif 
0276:  MOVLW  28
0277:  MOVWF  78
0278:  BCF    03.5
0279:  MOVF   1F,W
027A:  ANDLW  C7
027B:  IORWF  78,W
027C:  MOVWF  1F
....................     data=read_adc(); 
027D:  BSF    1F.2
027E:  BTFSC  1F.2
027F:  GOTO   27E
0280:  BSF    03.5
0281:  MOVF   1E,W
0282:  BCF    03.5
0283:  MOVWF  21
0284:  MOVF   1E,W
0285:  MOVWF  22
....................     delay_ms(1); 
0286:  MOVLW  01
0287:  MOVWF  2F
0288:  CALL   024
....................     if(data==512) 
0289:  MOVF   21,F
028A:  BTFSS  03.2
028B:  GOTO   2BC
028C:  MOVF   22,W
028D:  SUBLW  02
028E:  BTFSS  03.2
028F:  GOTO   2BC
....................     { 
....................        ydata=0; 
0290:  CLRF   24
0291:  CLRF   23
....................        setup_adc_ports(NO_ANALOGS); 
0292:  BSF    03.5
0293:  BSF    1F.0
0294:  BSF    1F.1
0295:  BSF    1F.2
0296:  BCF    1F.3
....................        printf(lcd_putc,"\f ORTA \n %04Lu",ydata); 
0297:  MOVLW  0C
0298:  BCF    03.5
0299:  BSF    03.6
029A:  MOVWF  0D
029B:  MOVLW  00
029C:  MOVWF  0F
029D:  BCF    03.0
029E:  MOVLW  09
029F:  BCF    03.6
02A0:  MOVWF  25
02A1:  CALL   180
02A2:  MOVLW  09
02A3:  MOVWF  04
02A4:  MOVF   24,W
02A5:  MOVWF  26
02A6:  MOVF   23,W
02A7:  MOVWF  25
02A8:  CALL   1D4
....................        set_pwm1_duty(ydata); 
02A9:  MOVF   24,W
02AA:  MOVWF  79
02AB:  MOVF   23,W
02AC:  MOVWF  78
02AD:  RRF    79,F
02AE:  RRF    78,F
02AF:  RRF    79,F
02B0:  RRF    78,F
02B1:  RRF    79,F
02B2:  MOVF   78,W
02B3:  MOVWF  15
02B4:  RRF    79,F
02B5:  RRF    79,W
02B6:  ANDLW  30
02B7:  MOVWF  77
02B8:  MOVF   17,W
02B9:  ANDLW  CF
02BA:  IORWF  77,W
02BB:  MOVWF  17
....................     } 
....................     if(data>512) 
02BC:  MOVF   22,W
02BD:  SUBLW  01
02BE:  BTFSC  03.0
02BF:  GOTO   30A
02C0:  XORLW  FF
02C1:  BTFSS  03.2
02C2:  GOTO   2C7
02C3:  MOVF   21,W
02C4:  SUBLW  00
02C5:  BTFSC  03.0
02C6:  GOTO   30A
....................     { 
....................        output_high(PIN_C0);  // RC0=1 oldu NPN iletimi ileri yön aktif 
02C7:  BCF    20.0
02C8:  MOVF   20,W
02C9:  BSF    03.5
02CA:  MOVWF  07
02CB:  BCF    03.5
02CC:  BSF    07.0
....................        ydata=(ydata-512)*2+1; 
02CD:  MOVLW  00
02CE:  SUBWF  23,W
02CF:  MOVWF  25
02D0:  MOVF   24,W
02D1:  MOVWF  26
02D2:  MOVLW  02
02D3:  BTFSS  03.0
02D4:  MOVLW  03
02D5:  SUBWF  26,F
02D6:  BCF    03.0
02D7:  RLF    25,F
02D8:  RLF    26,F
02D9:  MOVLW  01
02DA:  ADDWF  25,W
02DB:  MOVWF  23
02DC:  MOVF   26,W
02DD:  MOVWF  24
02DE:  BTFSC  03.0
02DF:  INCF   24,F
....................        setup_adc_ports(NO_ANALOGS); 
02E0:  BSF    03.5
02E1:  BSF    1F.0
02E2:  BSF    1F.1
02E3:  BSF    1F.2
02E4:  BCF    1F.3
....................        printf(lcd_putc,"\f ILERI \n %04Lu",ydata); 
02E5:  MOVLW  14
02E6:  BCF    03.5
02E7:  BSF    03.6
02E8:  MOVWF  0D
02E9:  MOVLW  00
02EA:  MOVWF  0F
02EB:  BCF    03.0
02EC:  MOVLW  0A
02ED:  BCF    03.6
02EE:  MOVWF  25
02EF:  CALL   180
02F0:  MOVLW  09
02F1:  MOVWF  04
02F2:  MOVF   24,W
02F3:  MOVWF  26
02F4:  MOVF   23,W
02F5:  MOVWF  25
02F6:  CALL   1D4
....................        set_pwm1_duty(ydata); 
02F7:  MOVF   24,W
02F8:  MOVWF  79
02F9:  MOVF   23,W
02FA:  MOVWF  78
02FB:  RRF    79,F
02FC:  RRF    78,F
02FD:  RRF    79,F
02FE:  RRF    78,F
02FF:  RRF    79,F
0300:  MOVF   78,W
0301:  MOVWF  15
0302:  RRF    79,F
0303:  RRF    79,W
0304:  ANDLW  30
0305:  MOVWF  77
0306:  MOVF   17,W
0307:  ANDLW  CF
0308:  IORWF  77,W
0309:  MOVWF  17
....................     } 
....................     if(data<512) 
030A:  MOVF   22,W
030B:  SUBLW  01
030C:  BTFSS  03.0
030D:  GOTO   351
....................     { 
....................        output_high(PIN_C0);  // RC0=0 oldu PNP iletimde geri yön aktif 
030E:  BCF    20.0
030F:  MOVF   20,W
0310:  BSF    03.5
0311:  MOVWF  07
0312:  BCF    03.5
0313:  BSF    07.0
....................        ydata=(511-ydata)*2+1; 
0314:  MOVF   23,W
0315:  SUBLW  FF
0316:  MOVWF  25
0317:  MOVLW  01
0318:  MOVWF  26
0319:  MOVF   24,W
031A:  BTFSS  03.0
031B:  INCFSZ 24,W
031C:  SUBWF  26,F
031D:  BCF    03.0
031E:  RLF    25,F
031F:  RLF    26,F
0320:  MOVLW  01
0321:  ADDWF  25,W
0322:  MOVWF  23
0323:  MOVF   26,W
0324:  MOVWF  24
0325:  BTFSC  03.0
0326:  INCF   24,F
....................        setup_adc_ports(NO_ANALOGS); 
0327:  BSF    03.5
0328:  BSF    1F.0
0329:  BSF    1F.1
032A:  BSF    1F.2
032B:  BCF    1F.3
....................        printf(lcd_putc,"\f GERI \n %04Lu",ydata); 
032C:  MOVLW  1C
032D:  BCF    03.5
032E:  BSF    03.6
032F:  MOVWF  0D
0330:  MOVLW  00
0331:  MOVWF  0F
0332:  BCF    03.0
0333:  MOVLW  09
0334:  BCF    03.6
0335:  MOVWF  25
0336:  CALL   180
0337:  MOVLW  09
0338:  MOVWF  04
0339:  MOVF   24,W
033A:  MOVWF  26
033B:  MOVF   23,W
033C:  MOVWF  25
033D:  CALL   1D4
....................        set_pwm1_duty(ydata); 
033E:  MOVF   24,W
033F:  MOVWF  79
0340:  MOVF   23,W
0341:  MOVWF  78
0342:  RRF    79,F
0343:  RRF    78,F
0344:  RRF    79,F
0345:  RRF    78,F
0346:  RRF    79,F
0347:  MOVF   78,W
0348:  MOVWF  15
0349:  RRF    79,F
034A:  RRF    79,W
034B:  ANDLW  30
034C:  MOVWF  77
034D:  MOVF   17,W
034E:  ANDLW  CF
034F:  IORWF  77,W
0350:  MOVWF  17
....................     } 
....................        delay_ms(5); 
0351:  MOVLW  05
0352:  MOVWF  2F
0353:  CALL   024
0354:  GOTO   260
....................    } 
....................  
.................... } 
....................  
0355:  SLEEP
....................  
....................  

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
